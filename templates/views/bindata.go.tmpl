// Code generated by go-bindata.
// sources:
// views/index.home.tmpl
// views/layout.tmpl
// DO NOT EDIT!

package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsIndexHomeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x49\xc9\x2c\xb3\xe3\x52\x50\xb0\xc9\x30\xb4\x73\x4d\xce\xc8\x77\x4f\xcd\x53\x48\x49\x4d\x4b\x2c\xcd\x29\x51\x28\x48\x4c\x4f\xb5\xd1\xcf\x30\xb4\xe3\xb2\xd1\x07\x2b\x03\x04\x00\x00\xff\xff\xd1\xc3\x94\x48\x2d\x00\x00\x00")

func viewsIndexHomeTmplBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHomeTmpl,
		"views/index.home.tmpl",
	)
}

func viewsIndexHomeTmpl() (*asset, error) {
	bytes, err := viewsIndexHomeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.home.tmpl", size: 45, mode: os.FileMode(420), modTime: time.Unix(1486895531, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsLayoutTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x90\xbd\x52\xc3\x30\x10\x84\xfb\x3c\xc5\x45\x75\x14\x41\x2f\xb9\x01\x6a\x52\xd0\x50\x5e\xac\x23\xbe\x19\xfd\x30\xce\xc5\x21\xe3\xf1\xbb\x33\xb6\x2c\x43\xa5\xfd\x76\x4e\xda\xd5\xd9\xfd\xeb\xfb\xcb\xc7\xe7\xe9\x0d\x3a\x89\xa1\xd9\xd9\xf9\x80\x80\xe9\xe2\x14\x25\xd5\xec\x00\x6c\x47\xe8\x67\x01\x60\x23\x09\x42\xc2\x48\x4e\x0d\x4c\xf7\xef\xdc\x8b\x82\x36\x27\xa1\x24\x4e\xdd\xd9\x4b\xe7\x3c\x0d\xdc\x92\x5e\xe0\x00\x9c\x58\x18\x83\xbe\xb6\x18\xc8\x3d\x1f\x9f\x0e\x10\xf1\x87\xe3\x2d\xfe\xb7\x6e\x57\xea\x17\xc6\x73\x20\x97\xb2\x02\xb3\x26\x0a\x4b\xa0\x66\x1c\x8f\x8b\x98\x26\x6b\x8a\x33\x17\x33\xa5\xd9\x2c\x3d\x0f\xeb\x85\x73\xf6\x8f\x22\xd7\xea\xd4\x6f\x68\x2a\x57\x63\xaf\x35\x9c\xf0\x42\xf5\x0f\xa0\xf5\x36\x1c\x91\x53\x05\x80\x71\x3c\x3e\x98\x82\x9f\xa6\xed\xb1\x32\x50\x52\x4d\x89\x2d\xf0\x95\xb3\xd4\x54\x6b\xfe\xc8\x9a\xa5\xa6\x35\x65\xd7\xbf\x01\x00\x00\xff\xff\x8c\x4c\x7a\x46\x7c\x01\x00\x00")

func viewsLayoutTmplBytes() ([]byte, error) {
	return bindataRead(
		_viewsLayoutTmpl,
		"views/layout.tmpl",
	)
}

func viewsLayoutTmpl() (*asset, error) {
	bytes, err := viewsLayoutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/layout.tmpl", size: 380, mode: os.FileMode(420), modTime: time.Unix(1486895531, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/index.home.tmpl": viewsIndexHomeTmpl,
	"views/layout.tmpl": viewsLayoutTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"views": &bintree{nil, map[string]*bintree{
		"index.home.tmpl": &bintree{viewsIndexHomeTmpl, map[string]*bintree{}},
		"layout.tmpl": &bintree{viewsLayoutTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
